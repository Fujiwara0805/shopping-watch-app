"use client";

import { useState, useCallback, useRef, useEffect, memo } from 'react';
import { motion } from 'framer-motion';
import { Heart, Share2, Clock, Link as LinkIcon, ExternalLink, Instagram, Copy, MapPin, Eye, MessageCircle, ChevronDown, Tag, UserPlus, Info, ShoppingCart, Utensils, Camera, GamepadIcon, Wrench, Layers, FileIcon, Calendar, Briefcase, ShoppingBag, Users, MessageSquareText, Trash2, Flag, AlertTriangle, Loader2, Star, Package, HandCoins, User, UserCheck, PersonStanding, Footprints } from 'lucide-react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';
import { cn } from '@/lib/utils';
import { PostWithAuthor, AuthorProfile } from '@/types/post';
import { supabase } from '@/lib/supabaseClient';
import { CustomModal } from '@/components/ui/custom-modal';
import { useToast } from '@/hooks/use-toast';
import React from 'react';
import { ExtendedPostWithAuthor } from '@/types/timeline';

function formatRemainingTime(expiresAt: number): string {
  const now = Date.now();
  const remainingMillis = expiresAt - now;

  if (remainingMillis <= 0) return "Êé≤ËºâÁµÇ‰∫Ü";

  const hours = Math.floor(remainingMillis / (1000 * 60 * 60));
  const minutes = Math.floor((remainingMillis % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 0) {
    return `ÊÆã„ÇäÁ¥Ñ${hours}ÊôÇÈñì${minutes > 0 ? `${minutes}ÂàÜ` : ''}`;
  }
  return `ÊÆã„ÇäÁ¥Ñ${minutes}ÂàÜ`;
}

function formatDistance(distance?: number): string {
  if (!distance) return '';
  if (distance < 1000) {
    return `${Math.round(distance)}m`;
  }
  return `${(distance / 1000).toFixed(1)}km`;
}

function formatViewCount(count: number): string {
  if (count < 1000) {
    return count.toString();
  } else if (count < 10000) {
    return `${(count / 1000).toFixed(1)}k`;
  } else {
    return `${Math.floor(count / 1000)}k`;
  }
}

function formatCommentCount(count: number): string {
  if (count < 1000) {
    return count.toString();
  } else if (count < 10000) {
    return `${(count / 1000).toFixed(1)}k`;
  } else {
    return `${Math.floor(count / 1000)}k`;
  }
}

interface PostCardProps {
  post: ExtendedPostWithAuthor;
  onLike?: (postId: string, isLiked: boolean) => Promise<void>;
  onView?: (postId: string) => Promise<void>;
  onComment?: (post: ExtendedPostWithAuthor) => void;
  onDelete?: (postId: string) => void;
  currentUserId?: string | null;
  showDistance?: boolean;
  isOwnPost?: boolean;
  onClick?: (postId: string) => void;
  disableClick?: boolean;
  enableComments?: boolean;
}

// ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüÁîªÂÉè„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const OptimizedImage = memo(({ 
  src, 
  alt, 
  className, 
  onLoad,
  onError 
}: { 
  src: string; 
  alt: string; 
  className?: string;
  onLoad?: () => void;
  onError?: () => void;
}) => {
  const [isLoaded, setIsLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);
  const [isInView, setIsInView] = useState(false);
  const imgRef = useRef<HTMLImageElement>(null);
  const [loadStarted, setLoadStarted] = useState(false);

  useEffect(() => {
    const img = imgRef.current;
    if (!img) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && !loadStarted) {
            setIsInView(true);
            setLoadStarted(true);
            observer.unobserve(img);
          }
        });
      },
      {
        rootMargin: '50px',
        threshold: 0.1
      }
    );

    observer.observe(img);
    return () => observer.unobserve(img);
  }, [loadStarted]);

  useEffect(() => {
    if (isInView && !isLoaded && !hasError) {
      const img = new Image();
      img.onload = () => {
        setIsLoaded(true);
        onLoad?.();
      };
      img.onerror = () => {
        setHasError(true);
        onError?.();
      };
      img.src = src;
    }
  }, [isInView, src, isLoaded, hasError, onLoad, onError]);

  return (
    <div ref={imgRef} className={cn("relative overflow-hidden", className)}>
      {!isLoaded && !hasError && (
        <div className="absolute inset-0 bg-gradient-to-br from-gray-200 to-gray-300 animate-pulse flex items-center justify-center">
          <div className="w-8 h-8 bg-gray-400 rounded animate-pulse" />
        </div>
      )}
      
      {hasError && (
        <div className="absolute inset-0 bg-gray-200 flex items-center justify-center">
          <div className="text-gray-500 text-sm text-center">
            <div className="w-8 h-8 bg-gray-400 rounded mx-auto mb-2" />
            ÁîªÂÉè„ÇíË™≠„ÅøËæº„ÇÅ„Åæ„Åõ„Çì
          </div>
        </div>
      )}
      
      {isLoaded && !hasError && (
        <motion.img
          src={src}
          alt={alt}
          className="w-full h-full object-cover"
          initial={{ opacity: 0, scale: 1.1 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.3 }}
          loading="lazy"
        />
      )}
    </div>
  );
});

OptimizedImage.displayName = 'OptimizedImage';

// Êñ∞Ë¶èËøΩÂä†ÔºöRatingDisplay„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà (post-card.tsxÂÜÖ„Åß‰ΩøÁî®„Åô„Çã„Åü„ÇÅ‰øÆÊ≠£)
const RatingDisplay = memo(({ rating }: { rating: number | null | undefined }) => {
  if (rating == null) return null;

  const fullStars = Math.floor(rating);
  const hasHalfStar = rating - fullStars >= 0.5;

  return (
    <div className="flex items-center space-x-0.5">
      {[...Array(5)].map((_, i) => {
        const isFull = i < fullStars;
        const isHalf = i === fullStars && hasHalfStar;

        return (
          <div key={i} className="relative">
            <Star
              className={cn(
                "h-4 w-4 text-gray-300",
                { "fill-yellow-400": isFull || isHalf }
              )}
            />
            {isHalf && (
              <div
                className="absolute inset-0 overflow-hidden"
                style={{ width: '50%' }}
              >
                <Star className="h-4 w-4 text-yellow-400 fill-yellow-400" />
              </div>
            )}
          </div>
        );
      })}
      <span className="text-sm font-medium ml-1" style={{ color: '#73370c' }}>({rating.toFixed(1)})</span>
    </div>
  );
});

RatingDisplay.displayName = 'RatingDisplay';

const UserAvatar = memo(({ author }: { author: AuthorProfile | null }) => {
  const authorAvatarUrl = author?.avatar_url
    ? supabase.storage.from('avatars').getPublicUrl(author.avatar_url).data.publicUrl
    : null;

  return (
    <Avatar className="h-7 w-7">
      <AvatarImage src={authorAvatarUrl || undefined} alt={author?.display_name || 'ÊäïÁ®øËÄÖ'} />
      <AvatarFallback className="text-xs">{author?.display_name?.charAt(0) || '?'}</AvatarFallback>
    </Avatar>
  );
});

UserAvatar.displayName = 'UserAvatar';

// üî• „Ç∏„É£„É≥„É´„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Å®„Ç´„É©„Éº„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞„Çí‰øÆÊ≠£Ôºà„Ç´„ÉÜ„Ç¥„É™Áî®„Å´Â§âÊõ¥Ôºâ
const getCategoryIconAndColor = (category: string) => {
  switch(category) {
    case 'È£≤È£üÂ∫ó':
      return {
        icon: Utensils,
        bgColor: 'bg-orange-100',
        textColor: 'text-orange-800',
        borderColor: 'border-orange-200'
      };
    case 'Â∞èÂ£≤Â∫ó':
      return {
        icon: ShoppingBag,
        bgColor: 'bg-blue-100',
        textColor: 'text-blue-800',
        borderColor: 'border-blue-200'
      };
    case '„Ç§„Éô„É≥„ÉàÈõÜÂÆ¢':
      return {
        icon: Calendar,
        bgColor: 'bg-purple-100',
        textColor: 'text-purple-800',
        borderColor: 'border-purple-200'
      };
    case 'ÂøúÊè¥':
      return {
        icon: Heart,
        bgColor: 'bg-pink-100',
        textColor: 'text-pink-800',
        borderColor: 'border-pink-200'
      };
    case 'Âèó„ÅëÊ∏°„Åó':
      return {
        icon: Package,
        bgColor: 'bg-green-100',
        textColor: 'text-green-800',
        borderColor: 'border-green-200'
      };
    case 'ÈõëË´á': // üî• ËøΩÂä†
      return {
        icon: MessageSquareText,
        bgColor: 'bg-gray-100',
        textColor: 'text-gray-800',
        borderColor: 'border-gray-200'
      };
    default:
      return {
        icon: Layers,
        bgColor: 'bg-slate-100',
        textColor: 'text-slate-800',
        borderColor: 'border-slate-200'
      };
  }
};

// „Ç´„ÉÜ„Ç¥„É™„Ç´„É©„Éº„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
const getCategoryColor = (category: string) => {
  switch(category) {
    case 'È£≤È£üÂ∫ó':
      return 'bg-orange-100 text-orange-800 border-orange-200';
    case 'Â∞èÂ£≤Â∫ó':
      return 'bg-blue-100 text-blue-800 border-blue-200';
    case '„Ç§„Éô„É≥„ÉàÈõÜÂÆ¢':
      return 'bg-purple-100 text-purple-800 border-purple-200';
    case 'ÂøúÊè¥':
      return 'bg-pink-100 text-pink-800 border-pink-200';
    case 'Âèó„ÅëÊ∏°„Åó':
      return 'bg-green-100 text-green-800 border-green-200';
    case 'ÈõëË´á': // üî• ËøΩÂä†
      return 'bg-gray-100 text-gray-800 border-gray-200';
    default:
      return 'bg-gray-100 text-gray-800 border-gray-200';
  }
};

// üî• ‰øÆÊ≠£ÔºöÊù•ÂÆ¢Áä∂Ê≥Å„ÇíËß£Êûê„Åó„Å¶Ë°®Á§∫„Åô„Çã„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
const CustomerSituationDisplay = memo(({ customerSituation }: { customerSituation: string }) => {
  // Êù•ÂÆ¢Áä∂Ê≥Å„ÅÆÊñáÂ≠óÂàó„Åã„Çâ‰∫∫Êï∞„ÇíÊäΩÂá∫ÔºàÁ∑è‰∫∫Êï∞„Å™„ÅóÔºâ
  const parseCustomerSituation = (situation: string) => {
    // "Áî∑ÊÄß: 4‰∫∫, Â•≥ÊÄß: 6‰∫∫" „ÅÆÂΩ¢Âºè„Åã„ÇâÊäΩÂá∫
    const maleMatch = situation.match(/Áî∑ÊÄß:\s*(\d+)/);
    const femaleMatch = situation.match(/Â•≥ÊÄß:\s*(\d+)/);
    
    return {
      male: maleMatch ? parseInt(maleMatch[1]) : 0,
      female: femaleMatch ? parseInt(femaleMatch[1]) : 0
    };
  };

  const { male, female } = parseCustomerSituation(customerSituation);

  return (
    <div className="flex items-center space-x-3">
      {/* Áî∑ÊÄß„ÅÆ‰∫∫Êï∞ */}
      {male > 0 && (
        <div className="flex items-center space-x-1 bg-blue-100 px-3 py-1.5 rounded-md">
          <User className="h-4 w-4 text-blue-600" />
          <span className="text-sm font-medium text-blue-700">{male}</span>
        </div>
      )}
      
      {/* Â•≥ÊÄß„ÅÆ‰∫∫Êï∞ */}
      {female > 0 && (
        <div className="flex items-center space-x-1 bg-pink-100 px-3 py-1.5 rounded-md">
          <UserCheck className="h-4 w-4 text-pink-600" />
          <span className="text-sm font-medium text-pink-700">{female}</span>
        </div>
      )}
    </div>
  );
});

CustomerSituationDisplay.displayName = 'CustomerSituationDisplay';

// üî• Êñ∞Ë¶èËøΩÂä†ÔºöÊÆã„ÇäÊï∞„ÅÆÂçò‰Ωç„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
const getRemainingUnit = (category: string | null) => {
  switch(category) {
    case 'È£≤È£üÂ∫ó':
      return 'Â∏≠';
    case 'Â∞èÂ£≤Â∫ó':
      return 'ÂÄã';
    case '„Ç§„Éô„É≥„ÉàÈõÜÂÆ¢':
      return '‰∫∫';
    default:
      return '‰ª∂';
  }
};

export const PostCard = memo(({ 
  post, 
  onLike, 
  onView,
  onComment,
  onDelete,
  currentUserId, 
  showDistance = false, 
  isOwnPost, 
  onClick,
  disableClick = false,
  enableComments = false
}: PostCardProps) => {
  const [showShareDialog, setShowShareDialog] = useState(false);
  const [showBasicInfo, setShowBasicInfo] = useState(true); // üî• ‰øÆÊ≠£ÔºöÂàùÊúüÁä∂ÊÖã„Çítrue„Å´Â§âÊõ¥
  const [imageLoaded, setImageLoaded] = useState(false);
  const [isLiking, setIsLiking] = useState(false);
  const [hasBeenViewed, setHasBeenViewed] = useState(false);
  
  // üî• ËøΩÂä†ÔºöÂâäÈô§„ÉªÈÄöÂ†±„É¢„Éº„ÉÄ„É´Èñ¢ÈÄ£
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showReportModal, setShowReportModal] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [reportReason, setReportReason] = useState('');
  const [reportDetails, setReportDetails] = useState('');
  const [isReporting, setIsReporting] = useState(false);
  
  // üî• ËøΩÂä†Ôºö„Åä„Åô„Åù„Çè„Åë„ÅÆ„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãÁÆ°ÁêÜ
  const [supportPurchaseLoading, setSupportPurchaseLoading] = useState<{ [key: string]: boolean }>({});
  
  // üî• Êñ∞Ë¶èËøΩÂä†Ôºö„ÇØ„Éº„Éù„É≥„É¢„Éº„ÉÄ„É´Èñ¢ÈÄ£
  const [showCouponModal, setShowCouponModal] = useState(false);
  const [isDownloadingCoupon, setIsDownloadingCoupon] = useState(false);
  const couponModalRef = useRef<HTMLDivElement>(null);
  
  const { toast } = useToast();
  const cardRef = useRef<HTMLDivElement>(null);

  const isMyPost = isOwnPost || (post.author_user_id === currentUserId);

  const [anonymousLikedPosts, setAnonymousLikedPosts] = useState<string[]>([]);
  
  useEffect(() => {
    if (!currentUserId) {
      const anonymousLikes = JSON.parse(localStorage.getItem('anonymousLikes') || '[]');
      setAnonymousLikedPosts(anonymousLikes);
    }
  }, [currentUserId]);

  // „Éì„É•„ÉºÊï∞„Ç´„Ç¶„É≥„ÉàÔºàIntersection Observer‰ΩøÁî®Ôºâ
  useEffect(() => {
    if (!onView || hasBeenViewed) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && entry.intersectionRatio > 0.5) {
            setHasBeenViewed(true);
            onView(post.id);
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: 0.5,
        rootMargin: '0px'
      }
    );

    if (cardRef.current) {
      observer.observe(cardRef.current);
    }

    return () => observer.disconnect();
  }, [onView, post.id, hasBeenViewed]);

  const isLiked = currentUserId 
    ? post.isLikedByCurrentUser 
    : anonymousLikedPosts.includes(post.id);

  const handleLikeClick = useCallback(async (e: React.MouseEvent) => {
    e.stopPropagation();
    
    if (isLiking) return;
    
    if (isMyPost && currentUserId) {
      toast({
        title: "Ëá™ÂàÜ„ÅÆÊäïÁ®ø„Å´„ÅØ„ÅÑ„ÅÑ„Å≠„Åß„Åç„Åæ„Åõ„Çì",
        duration: 1000,
      });
      return;
    }

    if (!currentUserId) {
      const anonymousLikes = JSON.parse(localStorage.getItem('anonymousLikes') || '[]');
      const alreadyLiked = anonymousLikes.includes(post.id);
      
      if (alreadyLiked && !isLiked) {
        setAnonymousLikedPosts(prev => prev.filter(id => id !== post.id));
        return;
      } else if (!alreadyLiked && isLiked) {
        setAnonymousLikedPosts(prev => [...prev, post.id]);
        return;
      }
    }
    
    if (onLike) {
      setIsLiking(true);
      try {
        await onLike(post.id, !isLiked);
        
        if (!currentUserId) {
          if (!isLiked) {
            setAnonymousLikedPosts(prev => [...prev, post.id]);
          } else {
            setAnonymousLikedPosts(prev => prev.filter(id => id !== post.id));
          }
        }
      } catch (error) {
        console.error('„ÅÑ„ÅÑ„Å≠Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        toast({
          title: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
          description: "„ÅÑ„ÅÑ„Å≠Âá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ",
          duration: 1000,
        });
      } finally {
        setIsLiking(false);
      }
    }
  }, [onLike, post.id, isLiked, isLiking, toast, isMyPost, currentUserId]);

  const handleShareClick = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    setShowShareDialog(true);
  }, []);

  const handleCommentClick = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    if (onComment) {
      onComment(post);
    }
  }, [onComment, post]);

  const handleCardClick = useCallback(() => {
    if (!disableClick && onClick) {
      onClick(post.id);
    }
  }, [disableClick, onClick, post.id]);

  const categoryIconAndColor = getCategoryIconAndColor(post.category || '');
  const CategoryIcon = categoryIconAndColor.icon;

  // üî• ‰øÆÊ≠£ÔºöÊäïÁ®øÊôÇÈñì„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„ÉàÈñ¢Êï∞„ÇíÂ§âÊõ¥Ôºà489Ë°åÁõÆ‰ªòËøëÔºâ
  const formattedDate = post.created_at ? (() => {
    const date = new Date(post.created_at);
    const hours = date.getHours();
    const minutes = date.getMinutes();
    return `${hours}ÊôÇ${minutes.toString().padStart(2, '0')}ÂàÜÊäïÁ®ø`;
  })() : 'ÊôÇÈñì‰∏çÊòé';

  const copyToClipboard = useCallback((text: string, message: string) => {
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: `‚úÖ ${message}`,
        duration: 1000,
      });
      setShowShareDialog(false);
    }).catch(err => console.error("„Ç≥„Éî„ÉºÂ§±Êïó:", err));
  }, [toast]);

  const handleCopyStoreName = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    if (post.store_name) {
      copyToClipboard(post.store_name, `„Äå${post.store_name}„Äç„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ`);
    }
  }, [post.store_name, copyToClipboard]);

  const handleInstagramShare = useCallback(() => {
    const postUrl = `${window.location.origin}/post/${post.id}`;
    copyToClipboard(postUrl, "ÊäïÁ®ø„ÅÆ„É™„É≥„ÇØ„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü„ÄÇInstagram„Ç¢„Éó„É™„ÇíÈñã„ÅÑ„Å¶ÂÖ±Êúâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
    setShowShareDialog(false);
  }, [post.id, copyToClipboard]);

  const handleNativeShare = useCallback(async () => {
    const shareData = {
      title: `${post.store_name}„ÅÆ${post.category}„Åå„ÅäÂæóÔºÅ`,
      text: post.content,
      url: `${window.location.origin}/post/${post.id}`,
    };
    if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
      try {
        await navigator.share(shareData);
        setShowShareDialog(false);
      } catch (error) {
        console.error('„Éç„Ç§„ÉÜ„Ç£„ÉñÂÖ±ÊúâÂ§±Êïó:', error);
      }
    } else {
      copyToClipboard(shareData.url, "„É™„É≥„ÇØ„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ");
    }
  }, [post.store_name, post.category, post.content, post.id, copyToClipboard]);

  // Ë§áÊï∞ÁîªÂÉè„ÅÆÂá¶ÁêÜ
  const getImageUrls = useCallback(() => {
    if (post.image_urls) {
      try {
        const urls = JSON.parse(post.image_urls);
        return Array.isArray(urls) ? urls : [];
      } catch (error) {
        console.error('ÁîªÂÉèURLs„ÅÆËß£Êûê„Ç®„É©„Éº:', error);
        return [];
      }
    }
    return [];
  }, [post.image_urls]);

  // „Éï„Ç°„Ç§„É´URL„ÅÆÂá¶ÁêÜ
  const getFileUrls = useCallback(() => {
    if (post.file_urls) {
      try {
        const urls = JSON.parse(post.file_urls);
        return Array.isArray(urls) ? urls : [];
      } catch (error) {
        console.error('„Éï„Ç°„Ç§„É´URLs„ÅÆËß£Êûê„Ç®„É©„Éº:', error);
        return [];
      }
    }
    return [];
  }, [post.file_urls]);

  // „Éï„Ç°„Ç§„É´„Ç¢„Ç§„Ç≥„É≥„ÅÆÂèñÂæó
  const getFileIcon = useCallback((fileName: string) => {
    const extension = fileName.split('.').pop()?.toLowerCase();
    switch (extension) {
      case 'pdf':
        return 'üìÑ';
      case 'doc':
      case 'docx':
        return 'üìù';
      case 'xls':
      case 'xlsx':
        return 'üìä';
      default:
        return 'üìé';
    }
  }, []);

  const imageUrls = getImageUrls();
  const fileUrls = getFileUrls();

  // üî• ËøΩÂä†ÔºöÊäïÁ®øÂâäÈô§Âá¶ÁêÜ
  const handleDeletePost = async () => {
    if (!currentUserId || !isMyPost) return;

    setIsDeleting(true);
    try {
      // Ë´ñÁêÜÂâäÈô§„Å´Â§âÊõ¥
      const { error } = await supabase
        .from('posts')
        .update({ is_deleted: true })
        .eq('id', post.id);

      if (error) {
        console.error('ÊäïÁ®øÂâäÈô§„Ç®„É©„Éº:', error);
        throw error;
      }

      toast({
        title: "ÊäïÁ®ø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü",
        duration: 1000,
      });

      setShowDeleteModal(false);
      
      // Ë¶™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´ÂâäÈô§„ÇíÈÄöÁü•
      if (onDelete) {
        onDelete(post.id);
      }
    } catch (error) {
      console.error('ÊäïÁ®ø„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      toast({
        title: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
        description: "ÊäïÁ®ø„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
        duration: 3000,
      });
    } finally {
      setIsDeleting(false);
    }
  };

  // üî• ËøΩÂä†ÔºöÈÄöÂ†±Âá¶ÁêÜ
  const handleReportPost = async () => {
    if (!reportReason.trim()) {
      toast({
        title: "ÈÄöÂ†±ÁêÜÁî±„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
        duration: 2000,
      });
      return;
    }

    setIsReporting(true);
    try {
      // „ÅäÂïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„Å´ÈÄÅ‰ø°
      const response = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: 'ÈÄöÂ†±„Ç∑„Çπ„ÉÜ„É†',
          email: 'report@tokudoku.com',
          subject: `ÊäïÁ®øÈÄöÂ†± - ${post.id}`,
          message: `
„ÄêÊäïÁ®øÈÄöÂ†±„Äë
ÊäïÁ®øID: ${post.id}
ÊäïÁ®øËÄÖ: ${post.author?.display_name || '‰∏çÊòé'}
Â∫óËàóÂêç: ${post.store_name}
ÊäïÁ®øÂÜÖÂÆπ: ${post.content}

ÈÄöÂ†±ÁêÜÁî±: ${reportReason}
Ë©≥Á¥∞: ${reportDetails || '„Å™„Åó'}

ÈÄöÂ†±ËÄÖ: ${currentUserId ? '„É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂„Éº' : 'ÂåøÂêç„É¶„Éº„Ç∂„Éº'}
ÈÄöÂ†±Êó•ÊôÇ: ${new Date().toLocaleString('ja-JP')}
          `,
        }),
      });

      if (!response.ok) {
        throw new Error('ÈÄöÂ†±„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }

      toast({
        title: "ÈÄöÂ†±„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü",
        description: "ÊãÖÂΩìËÄÖ„ÅåÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„ÅÑ„Åü„Åó„Åæ„Åô",
        duration: 2000,
      });

      setShowReportModal(false);
      setReportReason('');
      setReportDetails('');
    } catch (error) {
      console.error('ÈÄöÂ†±„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      toast({
        title: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
        description: "ÈÄöÂ†±„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
        duration: 3000,
      });
    } finally {
      setIsReporting(false);
    }
  };

  // üî• „Åä„Åô„Åù„Çè„Åë„Éè„É≥„Éâ„É©„Éº„Çí‰øÆÊ≠£Ôºà„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãËøΩÂä†Ôºâ
  const handleSupportPurchase = useCallback(async (postId: string, amount: number) => {
    const loadingKey = `${postId}-${amount}`;
    
    // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÈñãÂßã
    setSupportPurchaseLoading(prev => ({ ...prev, [loadingKey]: true }));

    try {
      const response = await fetch('/api/support-purchase/create-checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          postId,
          amount,
        }),
      });

      const data = await response.json();
      
      if (data.checkoutUrl) {
        window.location.href = data.checkoutUrl;
      } else {
        // „Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
        let errorTitle = "„Åä„Åô„Åù„Çè„Åë„Åß„Åç„Åæ„Åõ„Çì";
        let errorDescription = data.error || 'Ê±∫Ê∏àURL„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
        
        // üî• ‰øÆÊ≠£Ôºö„Ç®„É©„Éº„Ç≥„Éº„Éâ„Å´Âøú„Åò„ÅüË©≥Á¥∞„É°„ÉÉ„Çª„Éº„Ç∏
        if (data.errorCode === 'SELLER_STRIPE_ACCOUNT_NOT_FOUND') {
          errorTitle = "„Åä„Åô„Åù„Çè„ÅëË®≠ÂÆöÊú™ÂÆå‰∫Ü";
          errorDescription = data.error;
        } else if (data.errorCode === 'SELLER_STRIPE_SETUP_INCOMPLETE') {
          errorTitle = "„Åä„Åô„Åù„Çè„ÅëË®≠ÂÆöÊú™ÂÆå‰∫Ü";
          errorDescription = data.error;
        } else if (data.errorCode === 'SELLER_PAYOUT_NOT_ENABLED') {
          errorTitle = "ÊîØÊâï„ÅÑÂèóÂèñË®≠ÂÆöÊú™ÂÆå‰∫Ü";
          errorDescription = data.error;
        }
        
        toast({
          title: errorTitle,
          description: errorDescription,
          duration: 5000, // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÈï∑„ÇÅ„Å´Ë°®Á§∫
        });
      }
    } catch (error) {
      console.error('Support purchase error:', error);
      toast({
        title: "„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
        description: "Ê±∫Ê∏àÂá¶ÁêÜ„ÅÆÈñãÂßã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ",
        duration: 3000,
      });
    } finally {
      // „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁµÇ‰∫Ü
      setSupportPurchaseLoading(prev => ({ ...prev, [loadingKey]: false }));
    }
  }, [toast]);

  // üî• Êñ∞Ë¶èËøΩÂä†Ôºö„ÇØ„Éº„Éù„É≥„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ
  const handleCouponClick = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    setShowCouponModal(true);
  }, []);

  // üî• Êñ∞Ë¶èËøΩÂä†Ôºö„ÇØ„Éº„Éù„É≥ÊúâÂäπÊúüÈôê„ÅÆË®àÁÆó
  const getCouponExpiryTime = useCallback(() => {
    if (!post.created_at) return 'ÊôÇÈñì‰∏çÊòé';
    
    const createdDate = new Date(post.created_at);
    const expiryDate = new Date(createdDate.getTime() + (3 * 60 * 60 * 1000)); // 3ÊôÇÈñìÂæå
    
    const hours = expiryDate.getHours();
    const minutes = expiryDate.getMinutes();
    const month = expiryDate.getMonth() + 1;
    const day = expiryDate.getDate();
    
    return `${month}Êúà${day}Êó• ${hours}ÊôÇ${minutes.toString().padStart(2, '0')}ÂàÜ„Åæ„Åß`;
  }, [post.created_at]);

  // üî• Êñ∞Ë¶èËøΩÂä†Ôºö„ÇØ„Éº„Éù„É≥ÁîªÂÉè‰øùÂ≠òÂá¶ÁêÜ
  const handleDownloadCoupon = useCallback(async () => {
    if (!couponModalRef.current) return;
    
    setIsDownloadingCoupon(true);
    
    try {
      // html2canvas„ÇíÂãïÁöÑ„Ç§„É≥„Éù„Éº„Éà
      const html2canvas = (await import('html2canvas')).default;
      
      const canvas = await html2canvas(couponModalRef.current, {
        backgroundColor: '#ffffff',
        scale: 2, // È´òËß£ÂÉèÂ∫¶
        useCORS: true,
        allowTaint: true,
        // üî• ‰øÆÊ≠£ÔºöÈªÑËâ≤ËÉåÊôØ„ÅÆÁØÑÂõ≤„ÅÆ„Çµ„Ç§„Ç∫„Å´Âêà„Çè„Åõ„Å¶Ë™øÊï¥
        width: couponModalRef.current.offsetWidth,
        height: couponModalRef.current.offsetHeight,
      });
      
      // ÁîªÂÉè„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
      const link = document.createElement('a');
      link.download = `tokudoku-coupon-${post.store_name || 'store'}-${Date.now()}.png`;
      link.href = canvas.toDataURL('image/png');
      link.click();
      
      toast({
        title: "„ÇØ„Éº„Éù„É≥„Çí‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºÅ",
        description: "ÁîªÂÉè„Éï„Ç°„Ç§„É´„Å®„Åó„Å¶‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü",
        duration: 2000,
      });
    } catch (error) {
      console.error('„ÇØ„Éº„Éù„É≥ÁîªÂÉè„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
      toast({
        title: "‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
        description: "„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ",
        duration: 2000,
      });
    } finally {
      setIsDownloadingCoupon(false);
    }
  }, [post.store_name, toast]);

  return (
    <>
      <Card 
        ref={cardRef}
        className={cn(
          "overflow-hidden transition-all duration-200",
          !disableClick && "hover:shadow-lg cursor-pointer",
          isMyPost && "ring-2 ring-blue-200 bg-blue-50/30"
        )}
        onClick={handleCardClick}
      >
        <CardHeader className="p-3 pb-1 space-y-0">
          {/* ÊäïÁ®øËÄÖÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥ÔºàÁã¨Á´ãÔºâ */}
          <div className="flex justify-between items-start mb-3">
            <div className="flex items-center space-x-2">
              <UserAvatar author={post.author} />
              <div className="flex flex-col">
                <div className="flex items-center space-x-2">
                  <p className="font-semibold text-base" style={{ color: '#73370c' }}>
                    {post.author?.display_name || '‰∏çÊòé„Å™ÊäïÁ®øËÄÖ'}
                  </p>
                  {/* üî• ‰øÆÊ≠£ÔºöÊù°‰ª∂„Å´Âøú„Åò„Å¶„Éê„ÉÉ„Ç∏„ÇíË°®Á§∫ */}
                  {(() => {
                    // „ÇØ„Éº„Éù„É≥ÈÖçÂ∏É‰∏≠„ÅÆÊù°‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ
                    const hasLocation = post.store_id && post.store_name && post.store_name !== 'Â∫óËàó‰∏çÊòé';
                    const isRestaurant = post.category === 'È£≤È£üÂ∫ó';
                    const hasRemainingOrCustomer = (post.remaining_slots != null) || (post.customer_situation && post.customer_situation.trim() !== '');
                    
                    const showCouponBadge = hasLocation && isRestaurant && hasRemainingOrCustomer;
                    
                    if (showCouponBadge) {
                      return (
                        <Badge 
                          className="text-base bg-yellow-100 text-yellow-800 border-yellow-200 animate-pulse cursor-pointer hover:bg-yellow-200 transition-colors"
                          title="„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„ÇØ„Éº„Éù„É≥„ÇíË°®Á§∫"
                          onClick={handleCouponClick}
                        >
                          <Tag className="h-3 w-3 mr-1" />
                          „ÇØ„Éº„Éù„É≥ÈÖçÂ∏É‰∏≠
                        </Badge>
                      );
                    } else if (isMyPost) {
                      return <Badge variant="default" className="text-xs">Ëá™ÂàÜ„ÅÆÊäïÁ®ø</Badge>;
                    }
                    
                    return null;
                  })()}
                </div>
                <div className="flex items-center space-x-2">
                  {/* üî• ÊäïÁ®øÊï∞„ÅÆË°®Á§∫„ÇíÂâäÈô§ */}
                  <p className="text-xs" style={{ color: '#73370c' }}>
                    {formattedDate}
                  </p>
                </div>
              </div>
            </div>
            
            {/* üî• ËøΩÂä†ÔºöËá™ÂàÜ„ÅÆÊäïÁ®ø„ÅÆÂ†¥Âêà„ÅØÂâäÈô§„Éú„Çø„É≥ */}
            {isMyPost && currentUserId && (
              <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.stopPropagation();
                  setShowDeleteModal(true);
                }}
                className="text-red-500 hover:text-red-700 hover:bg-red-50"
                title="ÊäïÁ®ø„ÇíÂâäÈô§"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            )}
          </div>
          
          {/* Ë©≥Á¥∞ÊÉÖÂ†±„Çª„ÇØ„Ç∑„Éß„É≥Ôºà„Éà„Ç∞„É´ÂΩ¢Âºè„Éª6Ë°å2ÂàóË°®ÂΩ¢ÂºèÔºâ */}
          <div className="mt-1">
            <div className="border border-gray-200 rounded-md overflow-hidden">
              {/* „Éà„Ç∞„É´„Éò„ÉÉ„ÉÄ„Éº */}
              <button
                onClick={() => setShowBasicInfo(!showBasicInfo)}
                className="w-full bg-gray-50 border-b border-gray-200 p-3 flex items-center justify-between hover:bg-gray-100 transition-colors"
              >
                <div className="flex items-center space-x-2">
                  <Info className="h-4 w-4 text-gray-500" />
                  <span className="text-base font-medium" style={{ color: '#73370c' }}>Ë©≥Á¥∞ÊÉÖÂ†±</span>
                </div>
                <motion.div
                  animate={{ rotate: showBasicInfo ? 180 : 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <ChevronDown className="h-4 w-4 text-gray-500" />
                </motion.div>
              </button>
              
              {/* „Éà„Ç∞„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
              <motion.div
                initial={false}
                animate={{ height: showBasicInfo ? 'auto' : 0 }}
                transition={{ duration: 0.2 }}
                className="overflow-hidden"
              >
                <div className="bg-white">
                  <table className="w-full">
                    <tbody>
                      {/* Ë©ï‰æ°Ë°®Á§∫ */}
                      {post.rating != null && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <Star className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>Ë©ï‰æ°</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <RatingDisplay rating={post.rating} />
                          </td>
                        </tr>
                      )}

                      {/* Â†¥ÊâÄ */}
                      {post.store_id && post.store_name && post.store_name !== 'Â∫óËàó‰∏çÊòé' && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <MapPin className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>Â†¥ÊâÄ</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="flex items-center justify-between">
                              <Button
                                variant="ghost"
                                className="p-0 h-auto font-normal hover:bg-transparent hover:text-primary flex-1"
                                onClick={handleCopyStoreName}
                                title="Â∫óËàóÂêç„Çí„Ç≥„Éî„Éº"
                              >
                                <span className={cn(
                                  "whitespace-normal break-words",
                                  (post.store_name || '').length > 20 ? "text-sm" : "text-base"
                                )} style={{ color: '#73370c' }}>
                                  {post.store_name}
                                </span>
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={handleCopyStoreName}
                                className="p-1 h-auto hover:bg-gray-100"
                                title="Â∫óËàóÂêç„Çí„Ç≥„Éî„Éº"
                              >
                                <Copy className="h-4 w-4 text-gray-400 hover:text-gray-600 flex-shrink-0" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                      )}
                      
                      {/* „Ç´„ÉÜ„Ç¥„É™ */}
                      {post.category && post.category !== '' && post.category !== null && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <CategoryIcon className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>„Ç´„ÉÜ„Ç¥„É™</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <Badge className={cn("text-base", getCategoryColor(post.category))}>
                              <CategoryIcon className="h-4 w-4 mr-2 flex-shrink-0" />
                              {post.category}
                            </Badge>
                          </td>
                        </tr>
                      )}
                      
                      {/* „É™„É≥„ÇØ */}
                      {post.url && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <LinkIcon className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>„É™„É≥„ÇØ</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <a
                              href={post.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:text-blue-800 underline break-all"
                              onClick={(e) => e.stopPropagation()}
                            >
                              {post.url}
                            </a>
                          </td>
                        </tr>
                      )}
                      
                      {/* „Éï„Ç°„Ç§„É´ */}
                      {fileUrls.length > 0 && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <FileIcon className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>„Éï„Ç°„Ç§„É´</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="space-y-2">
                              {fileUrls.map((fileUrl, index) => {
                                const fileName = fileUrl.split('/').pop() || `„Éï„Ç°„Ç§„É´${index + 1}`;
                                return (
                                  <a
                                    key={index}
                                    href={fileUrl}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="flex items-center space-x-2 text-blue-600 hover:text-blue-800 underline"
                                    onClick={(e) => e.stopPropagation()}
                                  >
                                    <span className="text-lg">{getFileIcon(fileName)}</span>
                                    <span className="break-all">{fileName}</span>
                                  </a>
                                );
                              })}
                            </div>
                          </td>
                        </tr>
                      )}
                      
                      {/* üî• ‰øÆÊ≠£ÔºöÊÆã„ÇäÊû†Êï∞„ÅÆË°®Á§∫ */}
                      {post.remaining_slots != null && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <Package className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>ÊÆã„Çä„ÅÆÊï∞</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="flex items-center justify-center">
                              <span className="text-base font-bold text-left" style={{ color: '#dd3730' }}>
                                ÊÆã„Çä„Çè„Åö„Åã {post.remaining_slots}{getRemainingUnit(post.category)}
                              </span>
                            </div>
                          </td>
                        </tr>
                      )}

                      {/* üî• ‰øÆÊ≠£ÔºöÊù•ÂÆ¢Áä∂Ê≥Å„ÅÆË°®Á§∫ */}
                      {post.customer_situation && post.customer_situation.trim() !== '' && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <Users className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>Êù•ÂÆ¢Áä∂Ê≥Å</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <CustomerSituationDisplay customerSituation={post.customer_situation} />
                          </td>
                        </tr>
                      )}

                      {/* üî• Êñ∞Ë¶èËøΩÂä†Ôºö„ÇØ„Éº„Éù„É≥„ÅÆË°®Á§∫ */}
                      {post.coupon_code && post.coupon_code.trim() !== '' && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <Tag className="h-4 w-4 text-gray-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>„ÇØ„Éº„Éù„É≥</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <Badge className="text-base bg-yellow-100 text-yellow-800 border-yellow-200">
                              {post.coupon_code}
                            </Badge>
                          </td>
                        </tr>
                      )}

                      {/* „Åä„Åô„Åù„Çè„ÅëË°®Á§∫ */}
                      {post.support_purchase_enabled && post.support_purchase_options && (
                        <tr className="border-b border-gray-100">
                          <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                            <div className="flex items-center space-x-2">
                              <Heart className="h-4 w-4 text-pink-500 flex-shrink-0" />
                              <span className="text-base" style={{ color: '#73370c' }}>„ÅäË£æÂàÜ„Åë</span>
                            </div>
                          </td>
                          <td className="p-3">
                            <div className="flex flex-wrap gap-2">
                              {JSON.parse(post.support_purchase_options).map((amount: number, index: number) => {
                                const loadingKey = `${post.id}-${amount}`;
                                const isLoading = supportPurchaseLoading[loadingKey];
                                
                                return (
                                  <Button
                                    key={index}
                                    variant="outline"
                                    size="sm"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleSupportPurchase(post.id, amount);
                                    }}
                                    className={cn(
                                      "bg-gradient-to-r from-orange-50 to-red-50 text-[#73370c] border-orange-200 font-semibold transition-all duration-300 transform",
                                      "hover:from-orange-100 hover:to-red-100 hover:border-orange-300 hover:shadow-md hover:scale-105",
                                      "active:scale-95 active:shadow-sm",
                                      isLoading && "opacity-75 cursor-not-allowed",
                                      isMyPost && "opacity-50 cursor-not-allowed hover:scale-100"
                                    )}
                                    disabled={isMyPost || isLoading}
                                    title={isMyPost ? "Ëá™ÂàÜ„ÅÆÊäïÁ®ø„Å´„ÅØ„Åä„Åô„Åù„Çè„Åë„Åß„Åç„Åæ„Åõ„Çì" : `¬•${amount.toLocaleString()}„Åß„Åä„Åô„Åù„Çè„Åë„Åô„Çã`}
                                  >
                                    {isLoading ? (
                                      <>
                                        <motion.div
                                          animate={{ rotate: 360 }}
                                          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                                          className="h-3 w-3 mr-1"
                                        >
                                          <Loader2 className="h-3 w-3 text-[#73370c]" />
                                        </motion.div>
                                        Âá¶ÁêÜ‰∏≠...
                                      </>
                                    ) : (
                                      <>
                                        <HandCoins className="h-3 w-3 mr-1" />
                                        ¬•{amount.toLocaleString()}
                                      </>
                                    )}
                                  </Button>
                                );
                              })}
                            </div>
                            {isMyPost && (
                              <p className="text-xs text-gray-500 mt-1">‚ÄªËá™ÂàÜ„ÅÆÊäïÁ®ø„Å´„ÅØ„Åä„Åô„Åù„Çè„Åë„Åß„Åç„Åæ„Åõ„Çì</p>
                            )}
                          </td>
                        </tr>
                      )}
                      
                      {/* Ë¶ñËÅ¥ÂõûÊï∞Ë°å - Â∏∏„Å´Ë°®Á§∫ */}
                      <tr className="border-b border-gray-100">
                        <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                          <div className="flex items-center space-x-2">
                            <Eye className="h-4 w-4 text-gray-500 flex-shrink-0" />
                            <span className="text-base" style={{ color: '#73370c' }}>Ë¶ñËÅ¥ÂõûÊï∞</span>
                          </div>
                        </td>
                        <td className="p-3">
                          <span className="text-base" style={{ color: '#73370c' }}>
                            {formatViewCount(post.views_count)}
                          </span>
                        </td>
                      </tr>
                      
                      {/* ÊÆã„ÇäÊôÇÈñìË°å - Â∏∏„Å´Ë°®Á§∫ */}
                      <tr className={cn(showDistance && post.distance !== undefined ? "border-b border-gray-100" : "")}>
                        <td className="p-3 bg-gray-50 w-1/3 font-medium border-r border-gray-100">
                          <div className="flex items-center space-x-2">
                            <Clock className="h-4 w-4 text-gray-500 flex-shrink-0" />
                            <span className="text-base" style={{ color: '#73370c' }}>ÊÆã„ÇäÊôÇÈñì</span>
                          </div>
                        </td>
                        <td className="p-3">
                          <span className="text-base" style={{ color: '#dd3730' }}>
                            {post.expires_at ? formatRemainingTime(new Date(post.expires_at).getTime()) : 'ÊúüÈôê„Å™„Åó'}
                          </span>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </motion.div>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="p-3 pt-1 flex flex-col h-full">
          {/* ÊäïÁ®øÂÜÖÂÆπ„Å®„ÅÆÈñìÈöîË™øÊï¥ */}
          <div className="flex-grow overflow-hidden mb-3 mt-1">
            <p className="text-lg whitespace-pre-line" style={{ color: '#73370c' }}>
              {post.content ? (post.content.length > 240 ? post.content.substring(0, 240) + '...' : post.content) : 'ÂÜÖÂÆπ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'}
            </p>
          </div>
          
          {/* ÁîªÂÉèË°®Á§∫„Ç®„É™„Ç¢ÔºàË§áÊï∞ÁîªÂÉèÂØæÂøúÔºâ */}
          {imageUrls.length > 0 && (
            <div className="flex justify-center w-full mb-3">
              <div className="relative rounded-md overflow-hidden">
                {imageUrls.length === 1 ? (
                  // Âçò‰∏ÄÁîªÂÉè„ÅÆÂ†¥Âêà
                  <OptimizedImage
                    src={imageUrls[0]}
                    alt="ÊäïÁ®øÁîªÂÉè"
                    className="w-full h-full"
                    onLoad={() => setImageLoaded(true)}
                  />
                ) : (
                  // Ë§áÊï∞ÁîªÂÉè„ÅÆÂ†¥ÂêàÔºà„Ç´„É´„Éº„Çª„É´Ôºâ
                  <Carousel className="w-full h-full">
                    <CarouselContent>
                      {imageUrls.map((imageUrl, index) => (
                        <CarouselItem key={index}>
                          <OptimizedImage
                            src={imageUrl}
                            alt={`ÊäïÁ®øÁîªÂÉè ${index + 1}`}
                            className="w-full h-full"
                            onLoad={() => setImageLoaded(true)}
                          />
                        </CarouselItem>
                      ))}
                    </CarouselContent>
                    
                    {/* „Ç´„É´„Éº„Çª„É´„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ */}
                    <CarouselPrevious 
                      className="absolute left-2 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white/90 text-gray-700 border-gray-300 shadow-lg"
                      size="sm"
                    />
                    <CarouselNext 
                      className="absolute right-2 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white/90 text-gray-700 border-gray-300 shadow-lg"
                      size="sm"
                    />
                    
                    {/* ÁîªÂÉè„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
                    <div className="absolute bottom-2 left-1/2 -translate-x-1/2 flex space-x-1">
                      {imageUrls.map((_, index) => (
                        <div
                          key={index}
                          className="w-2 h-2 rounded-full bg-white/60 shadow-sm"
                        />
                      ))}
                    </div>
                  </Carousel>
                )}
              </div>
            </div>
          )}

          {/* Êñ∞„Åó„ÅÑÁµ±Ë®à„Éª„Ç¢„ÇØ„Ç∑„Éß„É≥Ë°åÔºàÊ®™ÂπÖÈáçË¶ñ„ÅÆ„É¨„Ç§„Ç¢„Ç¶„ÉàÔºâ */}
          <div className="bg-gray-50 rounded-lg p-2 mt-2">
            <div className="grid grid-cols-3 gap-1 h-6">
              <button
                onClick={handleLikeClick}
                className={cn(
                  "flex items-center justify-center space-x-1 h-full rounded-md transition-colors px-1 border border-gray-300",
                  isLiked && "text-red-500",
                  isMyPost && currentUserId && "opacity-50 cursor-not-allowed",
                  isLiking && "opacity-50 cursor-not-allowed"
                )}
                style={{ backgroundColor: '#fcebeb' }}
                disabled={isLiking || (isMyPost && Boolean(currentUserId))}
                title={isMyPost && currentUserId ? "Ëá™ÂàÜ„ÅÆÊäïÁ®ø„Å´„ÅØË°å„Åè„Çà„Åß„Åç„Åæ„Åõ„Çì" : "Ë°å„Åè„Çà"}
              >
                <Footprints className={cn(
                  "h-4 w-4 transition-all duration-200 flex-shrink-0",
                  isLiked ? "text-red-500 fill-red-500" : "text-gray-600 hover:text-red-500",
                  isLiking && "animate-pulse"
                )} />
                <span className="text-base font-medium truncate">{post.likes_count}</span>
                <span className="text-base text-gray-500 truncate">Ë°å„Åè„Çà</span>
              </button>

              {/* „Ç≥„É°„É≥„ÉàÊï∞ */}
              {enableComments && (
                <button
                  onClick={handleCommentClick}
                  className="flex items-center justify-center space-x-1 h-full rounded-md transition-colors text-gray-600 hover:text-blue-500 px-1 border border-gray-300"
                  style={{ backgroundColor: '#eff4ff' }}
                  title="„Ç≥„É°„É≥„Éà"
                >
                  <MessageCircle className="h-4 w-4 flex-shrink-0" />
                  <span className="text-base font-medium truncate">{formatCommentCount(post.comments_count)}</span>
                  <span className="text-base text-gray-500 truncate">„Ç≥„É°„É≥„Éà</span>
                </button>
              )}

              {/* „Ç∑„Çß„Ç¢„Éú„Çø„É≥ */}
              <button
                onClick={handleShareClick}
                className="flex items-center justify-center space-x-1 h-full rounded-md transition-colors text-gray-600 hover:text-gray-800 px-1 border border-gray-300"
                style={{ backgroundColor: '#eefdf6' }}
                title="ÂÖ±Êúâ"
              >
                <Share2 className="h-4 w-4 flex-shrink-0" />
                <span className="text-base font-medium truncate">ÂÖ±Êúâ</span>
              </button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* üî• ËøΩÂä†ÔºöÂâäÈô§Á¢∫Ë™ç„É¢„Éº„ÉÄ„É´ */}
      <CustomModal
        isOpen={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="ÊäïÁ®ø„ÅÆÂâäÈô§"
        description="„Åì„ÅÆÊäïÁ®ø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü"
      >
        <div className="space-y-4">
          <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 text-red-600" />
              <span className="text-red-800 font-medium">Ê≥®ÊÑè</span>
            </div>
            <p className="text-red-700 text-sm mt-2">
              ÂâäÈô§„Åó„ÅüÊäïÁ®ø„ÅØÂæ©ÂÖÉ„Åß„Åç„Åæ„Åõ„Çì„ÄÇÊú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü
            </p>
          </div>
          
          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={() => setShowDeleteModal(false)}
              disabled={isDeleting}
            >
              „Ç≠„É£„É≥„Çª„É´
            </Button>
            <Button
              variant="destructive"
              onClick={handleDeletePost}
              disabled={isDeleting}
            >
              {isDeleting ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                  ÂâäÈô§‰∏≠...
                </>
              ) : (
                <>
                  <Trash2 className="h-4 w-4 mr-2" />
                  ÂâäÈô§„Åô„Çã
                </>
              )}
            </Button>
          </div>
        </div>
      </CustomModal>

      {/* üî• ÊîπËâØÔºöÈÄöÂ†±„É¢„Éº„ÉÄ„É´ */}
      <CustomModal
        isOpen={showReportModal}
        onClose={() => setShowReportModal(false)}
        title="ÊäïÁ®ø„ÇíÈÄöÂ†±"
        description="‰∏çÈÅ©Âàá„Å™ÊäïÁ®ø„ÇíÂ†±Âëä„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        className="sm:max-w-md"
      >
        <div className="space-y-4">
          <div className="bg-amber-50 border border-amber-200 rounded-lg p-3">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-4 w-4 text-amber-600" />
              <span className="text-amber-800 font-medium text-sm">ÈÄöÂ†±„Å´„Å§„ÅÑ„Å¶</span>
            </div>
            <p className="text-amber-700 text-xs mt-1">
              ÈÄöÂ†±„ÅÑ„Åü„Å†„ÅÑ„ÅüÂÜÖÂÆπ„ÅØÈÅãÂñ∂„ÉÅ„Éº„É†„ÅÆ„É°„Éº„É´„Å´ÈÄÅ‰ø°„Åï„Çå„ÄÅÈÅ©Âàá„Å´ÂØæÂøú„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2 text-gray-700">ÈÄöÂ†±ÁêÜÁî± <span className="text-red-500">*</span></label>
            <select
              value={reportReason}
              onChange={(e) => setReportReason(e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-gray-900"
            >
              <option value="">ÁêÜÁî±„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
              <option value="spam">„Çπ„Éë„É†„ÉªÈÅéÂ∫¶„Å™ÂÆ£‰ºù</option>
              <option value="inappropriate">‰∏çÈÅ©Âàá„Å™ÂÜÖÂÆπ„ÉªÁîªÂÉè</option>
              <option value="harassment">Â´å„Åå„Çâ„Åõ„ÉªË™πË¨ó‰∏≠ÂÇ∑</option>
              <option value="fake">ËôöÂÅΩ„ÉªË™§Ëß£„ÇíÊãõ„ÅèÊÉÖÂ†±</option>
              <option value="violence">Êö¥ÂäõÁöÑ„Å™ÂÜÖÂÆπ</option>
              <option value="adult">„Ç¢„ÉÄ„É´„Éà„ÉªÊÄßÁöÑ„Å™ÂÜÖÂÆπ</option>
              <option value="copyright">Ëëó‰ΩúÊ®©‰æµÂÆ≥</option>
              <option value="privacy">ÂÄã‰∫∫ÊÉÖÂ†±„ÅÆÊºèÊ¥©</option>
              <option value="illegal">ÈÅïÊ≥ïË°åÁÇ∫„ÉªÂç±Èô∫Ë°åÁÇ∫</option>
              <option value="other">„Åù„ÅÆ‰ªñ</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2 text-gray-700">Ë©≥Á¥∞ÊÉÖÂ†±Ôºà‰ªªÊÑèÔºâ</label>
            <textarea
              value={reportDetails}
              onChange={(e) => setReportDetails(e.target.value)}
              placeholder="ÂÖ∑‰ΩìÁöÑ„Å™ÂïèÈ°åÁÇπ„ÇÑË©≥Á¥∞„Åå„ÅÇ„Çå„Å∞Ë®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà500ÊñáÂ≠ó‰ª•ÂÜÖÔºâ"
              className="w-full p-3 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white text-gray-900 placeholder-gray-500 resize-none"
              rows={6}
              maxLength={500}
              style={{ fontSize: '16px' }}
            />
            <div className="text-xs text-gray-500 mt-1">
              {reportDetails.length}/500ÊñáÂ≠ó
            </div>
          </div>
          <div className="flex justify-end space-x-3">
            <Button
              variant="outline"
              onClick={() => {
                setShowReportModal(false);
                setReportReason('');
                setReportDetails('');
              }}
              disabled={isReporting}
            >
              „Ç≠„É£„É≥„Çª„É´
            </Button>
            <Button
              onClick={handleReportPost}
              disabled={isReporting || !reportReason.trim()}
              className="bg-red-600 hover:bg-red-700"
            >
              {isReporting ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                  ÈÄÅ‰ø°‰∏≠...
                </>
              ) : (
                <>
                  <Flag className="h-4 w-4 mr-2" />
                  ÈÄöÂ†±„Åô„Çã
                </>
              )}
            </Button>
          </div>
        </div>
      </CustomModal>

      {/* üî• Êõ¥Êñ∞ÔºöÂÖ±Êúâ„É¢„Éº„ÉÄ„É´ÔºàÈÄöÂ†±Ê©üËÉΩËøΩÂä†Ôºâ */}
      <CustomModal
        isOpen={showShareDialog}
        onClose={() => setShowShareDialog(false)}
        title="ÊäïÁ®ø„ÇíÂÖ±Êúâ"
        description="„Åì„ÅÆ„ÅäÂæóÊÉÖÂ†±„ÇíÂèãÈÅî„Å´Áü•„Çâ„Åõ„Çà„ÅÜÔºÅ"
      >
        <div className="space-y-3">
          <Button
            variant="outline"
            className="w-full justify-start text-left py-3 h-auto text-base"
            onClick={() => {
                copyToClipboard(`${window.location.origin}/post/${post.id}`, "„É™„É≥„ÇØ„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ");
            }}
          >
            <LinkIcon className="mr-2.5 h-5 w-5" />
            „É™„É≥„ÇØ„Çí„Ç≥„Éî„Éº
          </Button>
          <Button
            className="w-full justify-start text-left py-3 h-auto text-base bg-[#1DA1F2] hover:bg-[#1a91da] text-white"
            onClick={() => {
                window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(`${post.store_name}„ÅÆ${post.category}„Åå„ÅäÂæóÔºÅ ${post.content}`)}&url=${encodeURIComponent(`${window.location.origin}/post/${post.id}`)}`, '_blank');
                setShowShareDialog(false);
            }}
          >
            <svg className="mr-2.5 h-5 w-5 fill-current" viewBox="0 0 24 24" aria-hidden="true"><g><path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"></path></g></svg>
            X (Twitter) „ÅßÂÖ±Êúâ
          </Button>
          <Button
            variant="outline"
            className="w-full justify-start text-left py-3 h-auto text-base bg-[#E1306C] hover:bg-[#c92a5f] text-white"
            onClick={handleInstagramShare}
          >
            <Instagram className="mr-2.5 h-5 w-5" />
            Instagram„ÅßÂÖ±Êúâ
          </Button>
          {navigator.share && typeof navigator.share === 'function' && (
            <Button
              variant="outline"
              className="w-full justify-start text-left py-3 h-auto text-base"
              onClick={handleNativeShare}
            >
              <ExternalLink className="mr-2.5 h-5 w-5" />
              „Åù„ÅÆ‰ªñ„ÅÆ„Ç¢„Éó„É™„ÅßÂÖ±Êúâ
            </Button>
          )}
          
          {/* üî• ËøΩÂä†ÔºöÈÄöÂ†±„Éú„Çø„É≥ */}
          {!isMyPost && (
            <>
              <hr className="my-2" />
              <Button
                variant="outline"
                className="w-full justify-start text-left py-3 h-auto text-base text-red-600 hover:bg-red-50 hover:text-red-700"
                onClick={() => {
                  setShowShareDialog(false);
                  setShowReportModal(true);
                }}
              >
                <Flag className="mr-2.5 h-5 w-5" />
                „Åì„ÅÆÊäïÁ®ø„ÇíÈÄöÂ†±
              </Button>
            </>
          )}
        </div>
        <div className="mt-6 flex justify-end">
            <Button variant="ghost" onClick={() => setShowShareDialog(false)} className="text-base px-5 py-2.5 h-auto">Èñâ„Åò„Çã</Button>
        </div>
      </CustomModal>

      {/* üî• Êñ∞Ë¶èËøΩÂä†Ôºö„ÇØ„Éº„Éù„É≥„É¢„Éº„ÉÄ„É´ */}
      <CustomModal
        isOpen={showCouponModal}
        onClose={() => setShowCouponModal(false)}
        title=""
        description=""
        className="sm:max-w-md"
      >
        {/* üî• ‰øÆÊ≠£Ôºö‰øùÂ≠òÂØæË±°„ÅÆÁØÑÂõ≤„ÇíÈªÑËâ≤ËÉåÊôØ„ÅÆdiv„ÅÆ„Åø„Å´ÈôêÂÆö */}
        <div 
          ref={couponModalRef}
          className="bg-gradient-to-br from-yellow-50 to-orange-50 p-8 rounded-lg border-2 border-yellow-200"
          style={{ minHeight: '500px' }}
        >
          {/* „Çø„Ç§„Éà„É´ */}
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-yellow-800 mb-2">
              „Éà„ÇØ„Éâ„ÇØÂøúÊè¥„ÇØ„Éº„Éù„É≥
            </h2>
          </div>
          
          {/* „Éà„ÇØ„Éâ„ÇØ„Ç¢„Ç§„Ç≥„É≥Ôºà‰∏≠Â§ÆÈÖçÁΩÆÔºâ */}
          <div className="flex justify-center mb-6">
            <div className="w-24 h-24 rounded-full overflow-hidden shadow-lg">
              <img 
                src="https://res.cloudinary.com/dz9trbwma/image/upload/v1749032362/icon_n7nsgl.png"
                alt="„Éà„ÇØ„Éâ„ÇØ„Ç¢„Ç§„Ç≥„É≥"
                className="w-full h-full object-cover"
              />
            </div>
          </div>
          
          {/* Â∫óËàóÂêç */}
          <div className="text-center mb-4">
            <h3 className="text-xl font-semibold text-gray-800 mb-2">
              {post.store_name}
            </h3>
            <p className="text-gray-600">„Åß„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åô</p>
          </div>
          
          {/* „ÇØ„Éº„Éù„É≥ÂÜÖÂÆπÔºàÊäïÁ®ø„ÅÆ„ÇØ„Éº„Éù„É≥„Ç≥„Éº„Éâ„ÇíË°®Á§∫Ôºâ */}
          {post.coupon_code && (
            <div className="bg-white p-4 rounded-lg border-2 border-dashed border-yellow-400 mb-4">
              <div className="text-center">
                <p className="text-sm text-gray-600 mb-1">„ÇØ„Éº„Éù„É≥ÂÜÖÂÆπ</p>
                <p className="text-lg font-bold text-yellow-800">{post.coupon_code}</p>
              </div>
            </div>
          )}
          
          {/* ÊúâÂäπÊúüÈôê */}
          <div className="text-center mb-6">
            <p className="text-sm text-gray-600 mb-1">ÊúâÂäπÊúüÈôê</p>
            <p className="text-lg font-semibold text-red-600">
              {getCouponExpiryTime()}
            </p>
          </div>
          
          {/* Ê≥®ÊÑè‰∫ãÈ†Ö */}
          <div className="text-left text-base text-gray-500 mb-6">
            <p>‚Äª„ÇØ„Éº„Éù„É≥ÂÜÖÂÆπ„ÅØ„ÄÅ„ÅäÂ∫ó„Åß„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
            <p className="text-base font-semibold text-red-600">‚ÄªÊäïÁ®ø„ÅØ„ÄÅË®≠ÂÆö„Åó„ÅüÊôÇÈñì„ÅåÈÅé„Åé„Çã„Å®ÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇÂøÖ„ÅöÁîªÂÉè„Çí‰øùÂ≠ò„Åó„Å¶‰ºöË®àÊôÇ„Å´„ÅîÊèêÁ§∫„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
          </div>
        </div>
        
        {/* üî• „Éú„Çø„É≥„Ç®„É™„Ç¢„ÅØ‰øùÂ≠òÂØæË±°Â§ñÔºàref„ÅÆÂ§ñÂÅ¥„Å´ÈÖçÁΩÆÔºâ */}
        <div className="flex justify-between items-center mt-6">
          <Button
            variant="outline"
            onClick={() => setShowCouponModal(false)}
          >
            Èñâ„Åò„Çã
          </Button>
          
          <Button
            onClick={handleDownloadCoupon}
            disabled={isDownloadingCoupon}
            className="bg-yellow-500 hover:bg-yellow-600 text-white"
          >
            {isDownloadingCoupon ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin mr-2" />
                ‰øùÂ≠ò‰∏≠...
              </>
            ) : (
              <>
                <Camera className="h-4 w-4 mr-2" />
                ÁîªÂÉè„Å®„Åó„Å¶‰øùÂ≠ò
              </>
            )}
          </Button>
        </div>
      </CustomModal>
    </>
  );
});

PostCard.displayName = 'PostCard';