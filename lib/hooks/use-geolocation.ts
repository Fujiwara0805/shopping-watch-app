'use client';

import { useState, useEffect, useCallback } from 'react';

interface BrowserInfo {
  name: 'chrome' | 'firefox' | 'edge' | 'safari' | 'opera' | 'unknown';
  isPrivateMode: boolean;
  supportsPermissionsAPI: boolean;
}

interface GeolocationState {
  latitude: number | null;
  longitude: number | null;
  error: string | null;
  loading: boolean;
  permissionState: 'prompt' | 'granted' | 'denied' | 'unavailable' | 'pending';
  browserInfo: BrowserInfo;
}

const detectBrowser = (): BrowserInfo => {
  if (typeof window === 'undefined') {
    return { name: 'unknown', isPrivateMode: false, supportsPermissionsAPI: false };
  }

  const userAgent = navigator.userAgent;
  let name: BrowserInfo['name'] = 'unknown';
  let isPrivateMode = false;
  const supportsPermissionsAPI = 'permissions' in navigator && typeof navigator.permissions.query === 'function';

  if (/Chrome/.test(userAgent) && !/Edge/.test(userAgent) && !/CriOS/.test(userAgent)) {
    name = 'chrome';
  } else if (/Firefox/.test(userAgent)) {
    name = 'firefox';
  } else if (/Edge/.test(userAgent)) {
    name = 'edge';
  } else if ((/Safari/.test(userAgent) && !/Chrome/.test(userAgent)) || /iPad|iPhone|iPod/.test(userAgent)) {
    name = 'safari';
    // Safari/iOS private mode detection
    try {
      localStorage.setItem('test', 'test');
      localStorage.removeItem('test');
    } catch (e) {
      isPrivateMode = true;
    }
  } else if (/Opera|OPR\//.test(userAgent)) {
    name = 'opera';
  }

  // General private mode detection (less reliable for all browsers)
  if (name !== 'safari') {
    try {
      localStorage.setItem('test_private', 'test');
      localStorage.removeItem('test_private');
    } catch (e: any) { // e „ÅÆÂûã„Çí any „Å´Â§âÊõ¥
      if (e.name === 'QuotaExceededError' || e.name === 'SecurityError') {
          isPrivateMode = true;
      }
    }
  }

  return { name, isPrivateMode, supportsPermissionsAPI };
};

export function useGeolocation() {
  const [state, setState] = useState<GeolocationState>(() => ({
    latitude: null,
    longitude: null,
    error: null,
    loading: false,
    permissionState: 'pending',
    browserInfo: detectBrowser(),
  }));

  const requestLocation = useCallback(() => {
    console.log(`useGeolocation: requestLocation called for ${state.browserInfo.name}`);
    
    if (!navigator.geolocation) {
      console.error("useGeolocation: Geolocation API not available.");
      setState(prev => ({
        ...prev,
        error: '„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„Åß„ÅØ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ',
        loading: false,
        permissionState: 'unavailable',
      }));
      return;
    }

    // „Éó„É©„Ç§„Éô„Éº„Éà„É¢„Éº„Éâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    if (state.browserInfo.isPrivateMode) {
      setState(prev => ({
        ...prev,
        error: '„Éó„É©„Ç§„Éô„Éº„Éà„Éñ„É©„Ç¶„Ç∏„É≥„Ç∞„É¢„Éº„Éâ„Åß„ÅØ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„ÄÇÈÄöÂ∏∏„É¢„Éº„Éâ„Åß„Ç¢„ÇØ„Çª„Çπ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
        loading: false,
        permissionState: 'denied',
      }));
      return;
    }

    setState(prev => ({ 
      ...prev, 
      loading: true, 
      error: null, 
      latitude: null, 
      longitude: null,
    }));
    
    console.log(`useGeolocation: Starting location request for ${state.browserInfo.name}`);

    const options = {
      enableHighAccuracy: true,
      timeout: state.browserInfo.name === 'safari' ? 30000 : 20000,
      maximumAge: state.browserInfo.name === 'safari' ? 60000 : 0,
    };

    const successCallback = (position: GeolocationPosition) => {
      console.log(`useGeolocation: getCurrentPosition success for ${state.browserInfo.name}:`, position);
      
      const accuracy = position.coords.accuracy;
      console.log(`${state.browserInfo.name} location accuracy:`, accuracy);
      
      setState(prev => ({
        ...prev,
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
        error: null,
        loading: false,
        permissionState: 'granted',
      }));
    };

    const errorCallback = (geoError: GeolocationPositionError) => {
      console.error(`useGeolocation: getCurrentPosition error for ${state.browserInfo.name}:`, geoError);
      console.error(`${state.browserInfo.name} Error Code: ${geoError.code}, Message: ${geoError.message}`);

      let permissionErrorType: GeolocationState['permissionState'] = 'denied';
      let errorMessage = '';
      
      switch(geoError.code) {
        case geoError.PERMISSION_DENIED:
          if (state.browserInfo.name === 'safari') {
            errorMessage = `‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂà©Áî®„Åå„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ

„ÄêSafari „Åß„ÅÆË®≠ÂÆöÊñπÊ≥ï„Äë
1. SafariË®≠ÂÆö ‚Üí „Éó„É©„Ç§„Éê„Ç∑„Éº„Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£ ‚Üí ‰ΩçÁΩÆÊÉÖÂ†±„Çµ„Éº„Éì„Çπ
2. „Åæ„Åü„ÅØ„ÄÅ„Ç¢„Éâ„É¨„Çπ„Éê„ÉºÂ∑¶„ÅÆ üîí „Ç¢„Ç§„Ç≥„É≥„Çí„Çø„ÉÉ„Éó
3. "‰ΩçÁΩÆÊÉÖÂ†±" „Çí "Ë®±ÂèØ" „Å´Â§âÊõ¥

„ÄêiPhone„ÅÆË®≠ÂÆöÊñπÊ≥ï„Äë
1. Ë®≠ÂÆö ‚Üí „Éó„É©„Ç§„Éê„Ç∑„Éº„Å®„Çª„Ç≠„É•„É™„ÉÜ„Ç£ ‚Üí ‰ΩçÁΩÆÊÉÖÂ†±„Çµ„Éº„Éì„Çπ
2. Safari ‚Üí „Åì„ÅÆ„Çµ„Ç§„Éà„ÅÆ‰ΩøÁî®‰∏≠„ÅÆ„ÅøË®±ÂèØ`;
          } else {
            errorMessage = '‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂà©Áî®„Åå„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Éñ„É©„Ç¶„Ç∂„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
          }
          permissionErrorType = 'denied';
          break;
          
        case geoError.POSITION_UNAVAILABLE:
          if (state.browserInfo.name === 'safari') {
            errorMessage = `ÁèæÂú®‰ΩçÁΩÆ„ÇíÁâπÂÆö„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ

„ÄêÁ¢∫Ë™ç‰∫ãÈ†Ö„Äë
‚Ä¢ WiFi„Åæ„Åü„ÅØ„É¢„Éê„Ç§„É´ÈÄö‰ø°„ÅÆÊé•Á∂ö„ÇíÁ¢∫Ë™ç
‚Ä¢ Âª∫Áâ©„ÅÆÂ§ñ„ÇÑÁ™ì„ÅÆËøë„Åè„ÅßË©¶„Åó„Å¶„Åè„Å†„Åï„ÅÑ
‚Ä¢ Ê©üÂÜÖ„É¢„Éº„Éâ„Åå„Ç™„Éï„Å´„Å™„Å£„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
‚Ä¢ ‰ΩçÁΩÆÊÉÖÂ†±„Çµ„Éº„Éì„Çπ„Åå„Ç™„É≥„Å´„Å™„Å£„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç`;
          } else {
            errorMessage = 'ÁèæÂú®‰ΩçÁΩÆ„ÇíÁâπÂÆö„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇGPS„ÅÆÂèó‰ø°Áä∂ÊÖã„ÅåÊÇ™„ÅÑ„Åã„ÄÅ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„Å´ÂïèÈ°å„Åå„ÅÇ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ';
          }
          permissionErrorType = state.permissionState === 'granted' ? 'granted' : 'unavailable';
          break;
          
        case geoError.TIMEOUT:
          if (state.browserInfo.name === 'safari') {
            errorMessage = `‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂèñÂæó„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ

„ÄêÂØæÂá¶ÊñπÊ≥ï„Äë
‚Ä¢ „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁí∞Â¢É„ÅÆËâØ„ÅÑÂ†¥ÊâÄ„ÅßÂÜçË©¶Ë°å
‚Ä¢ „Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó
‚Ä¢ WiFiÁí∞Â¢É„Åß„ÅÆÊé•Á∂ö„ÇíÊé®Â•®`;
          } else {
            errorMessage = '‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂèñÂæó„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁí∞Â¢É„ÅÆËâØ„ÅÑÂ†¥ÊâÄ„ÅßÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ';
          }
          permissionErrorType = state.permissionState === 'granted' ? 'granted' : 'denied';
          break;
          
        default:
          errorMessage = `‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü („Ç≥„Éº„Éâ: ${geoError.code})„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ`;
          permissionErrorType = 'unavailable';
      }
      
      setState(prev => ({
        ...prev,
        error: errorMessage,
        loading: false,
        permissionState: permissionErrorType,
        latitude: null,
        longitude: null,
      }));
    };

    let timeoutId: NodeJS.Timeout | null = null;
    if (state.browserInfo.name === 'safari') {
      timeoutId = setTimeout(() => {
        errorCallback({
          code: 3,
          message: 'Safari timeout',
          PERMISSION_DENIED: 1,
          POSITION_UNAVAILABLE: 2,
          TIMEOUT: 3
        } as GeolocationPositionError);
      }, options.timeout + 1000);
    }

    try {
      const watchId = navigator.geolocation.getCurrentPosition(
        (position) => {
          if (timeoutId) clearTimeout(timeoutId);
          successCallback(position);
        },
        (error) => {
          if (timeoutId) clearTimeout(timeoutId);
          errorCallback(error);
        },
        options
      );
    } catch (error) {
      if (timeoutId) clearTimeout(timeoutId);
      console.error(`${state.browserInfo.name} geolocation request failed:`, error);
      setState(prev => ({
        ...prev,
        error: '‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂèñÂæó„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
        loading: false,
        permissionState: 'unavailable',
      }));
    }

  }, [state.permissionState, state.browserInfo]);

  useEffect(() => {
    if (state.permissionState === 'pending') {
      console.log(`useGeolocation: Checking permissions for ${state.browserInfo.name}`);
      
      if (state.browserInfo.supportsPermissionsAPI) {
        navigator.permissions.query({ name: 'geolocation' })
          .then((permissionStatus) => {
            console.log(`${state.browserInfo.name} Permission API status:`, permissionStatus.state);
            setState(prev => ({ 
              ...prev, 
              permissionState: permissionStatus.state as GeolocationState['permissionState'] 
            }));
            
            permissionStatus.onchange = () => {
              setState(prev => ({ 
                ...prev, 
                permissionState: permissionStatus.state as GeolocationState['permissionState'], 
                loading: false 
              }));
            };
          })
          .catch(err => {
            console.warn(`${state.browserInfo.name} permissions query failed:`, err);
            setState(prev => ({ ...prev, permissionState: 'prompt', loading: false }));
          });
      } else {
        console.log(`${state.browserInfo.name}: navigator.permissions not available, setting to prompt.`);
        setState(prev => ({ ...prev, permissionState: 'prompt', loading: false }));
      }
    }
  }, [state.permissionState, state.browserInfo.name, state.browserInfo.supportsPermissionsAPI]);

  console.log(`useGeolocation ${state.browserInfo.name}: Current state:`, {
    ...state,
    userAgent: typeof window !== 'undefined' ? navigator.userAgent : 'server'
  });
  
  return { ...state, requestLocation };
}